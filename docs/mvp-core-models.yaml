# MVP Core Data Models - Real Estate Platform (Rental + Sales)
# Platform Name: stambeno.ba
# Model: Airbnb-style with property sales capability

version: "1.0"
platform: "stambeno.ba"
type: "real_estate_marketplace"

# ============================================================================
# CORE ENTITIES
# ============================================================================

entities:
  
  # --------------------------------------------------------------------------
  # USER ENTITY
  # --------------------------------------------------------------------------
  User:
    description: "Platform user - can be owner, renter, or buyer"
    fields:
      id: { type: "uuid", primary_key: true }
      email: { type: "string", unique: true, required: true }
      password_hash: { type: "string", required: true }
      first_name: { type: "string", required: true }
      last_name: { type: "string", required: true }
      phone: { type: "string", required: true }
      avatar_url: { type: "string", nullable: true }
      date_of_birth: { type: "date", required: true }
      
      # Identity verification
      is_verified: { type: "boolean", default: false }
      id_document_url: { type: "string", nullable: true }
      verification_status: { type: "enum", values: ["pending", "verified", "rejected"], default: "pending" }
      
      # User type flags
      is_owner: { type: "boolean", default: false, description: "Can list properties" }
      is_business: { type: "boolean", default: false, description: "Business account (agency, developer)" }
      
      # Address
      address_line1: { type: "string", nullable: true }
      address_line2: { type: "string", nullable: true }
      city: { type: "string", nullable: true }
      postal_code: { type: "string", nullable: true }
      country: { type: "string", default: "BA" }
      
      # Financial
      stripe_customer_id: { type: "string", nullable: true }
      stripe_account_id: { type: "string", nullable: true, description: "For receiving payments" }
      
      # Ratings
      average_rating_as_owner: { type: "decimal", default: 0.0 }
      average_rating_as_guest: { type: "decimal", default: 0.0 }
      total_reviews_received: { type: "integer", default: 0 }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
      last_login_at: { type: "timestamp", nullable: true }
      account_status: { type: "enum", values: ["active", "suspended", "deleted"], default: "active" }
    
    relationships:
      properties: { type: "has_many", entity: "Property", foreign_key: "owner_id" }
      rental_bookings: { type: "has_many", entity: "RentalBooking", foreign_key: "guest_id" }
      purchase_offers: { type: "has_many", entity: "PurchaseOffer", foreign_key: "buyer_id" }
      reviews_written: { type: "has_many", entity: "Review", foreign_key: "reviewer_id" }
      reviews_received: { type: "has_many", entity: "Review", foreign_key: "reviewee_id" }
      messages: { type: "has_many", entity: "Message", foreign_key: "user_id" }
      saved_properties: { type: "many_to_many", entity: "Property", through: "SavedProperty" }

  # --------------------------------------------------------------------------
  # PROPERTY ENTITY
  # --------------------------------------------------------------------------
  Property:
    description: "Real estate property - can be for rent, sale, or both"
    fields:
      id: { type: "uuid", primary_key: true }
      owner_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Property type
      property_type: { type: "enum", required: true, values: ["apartment", "house", "studio", "villa", "condo", "land", "commercial"] }
      listing_type: { type: "enum", required: true, values: ["rent", "sale", "both"], description: "Whether property is for rent, sale, or both" }
      
      # Basic info
      title: { type: "string", required: true, max_length: 200 }
      description: { type: "text", required: true }
      
      # Location
      address_line1: { type: "string", required: true }
      address_line2: { type: "string", nullable: true }
      city: { type: "string", required: true }
      municipality: { type: "string", nullable: true }
      postal_code: { type: "string", nullable: true }
      country: { type: "string", default: "BA" }
      latitude: { type: "decimal", precision: 10, scale: 8, nullable: true }
      longitude: { type: "decimal", precision: 11, scale: 8, nullable: true }
      
      # Property details
      bedrooms: { type: "integer", required: true }
      bathrooms: { type: "decimal", required: true, description: "Can be 1.5, 2.5, etc" }
      size_sqm: { type: "decimal", required: true, description: "Size in square meters" }
      floor: { type: "integer", nullable: true }
      total_floors: { type: "integer", nullable: true }
      year_built: { type: "integer", nullable: true }
      
      # Pricing - RENTAL
      price_per_night: { type: "decimal", nullable: true, description: "For short-term rental" }
      price_per_month: { type: "decimal", nullable: true, description: "For long-term rental" }
      min_rental_nights: { type: "integer", default: 1, description: "Minimum rental duration" }
      max_rental_nights: { type: "integer", nullable: true, description: "Maximum rental duration" }
      cleaning_fee: { type: "decimal", default: 0 }
      deposit_amount: { type: "decimal", default: 0 }
      
      # Pricing - SALES
      sale_price: { type: "decimal", nullable: true, description: "For purchase" }
      price_negotiable: { type: "boolean", default: true }
      
      # Availability
      available_from: { type: "date", nullable: true }
      available_until: { type: "date", nullable: true }
      instant_book: { type: "boolean", default: false, description: "For rentals - book without owner approval" }
      
      # Status
      status: { type: "enum", values: ["draft", "active", "inactive", "sold", "rented_long_term", "under_contract"], default: "draft" }
      is_featured: { type: "boolean", default: false }
      
      # Media
      cover_image_url: { type: "string", nullable: true }
      virtual_tour_url: { type: "string", nullable: true }
      
      # Ratings
      average_rating: { type: "decimal", default: 0.0 }
      total_reviews: { type: "integer", default: 0 }
      total_rental_bookings: { type: "integer", default: 0 }
      
      # SEO
      slug: { type: "string", unique: true, required: true }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
      published_at: { type: "timestamp", nullable: true }
      sold_at: { type: "timestamp", nullable: true }
      
    relationships:
      owner: { type: "belongs_to", entity: "User", foreign_key: "owner_id" }
      images: { type: "has_many", entity: "PropertyImage", foreign_key: "property_id" }
      amenities: { type: "many_to_many", entity: "Amenity", through: "PropertyAmenity" }
      rental_bookings: { type: "has_many", entity: "RentalBooking", foreign_key: "property_id" }
      availability_calendar: { type: "has_many", entity: "PropertyAvailability", foreign_key: "property_id" }
      purchase_offers: { type: "has_many", entity: "PurchaseOffer", foreign_key: "property_id" }
      reviews: { type: "has_many", entity: "Review", foreign_key: "property_id" }
      saved_by_users: { type: "many_to_many", entity: "User", through: "SavedProperty" }

  # --------------------------------------------------------------------------
  # PROPERTY IMAGE
  # --------------------------------------------------------------------------
  PropertyImage:
    description: "Property photos"
    fields:
      id: { type: "uuid", primary_key: true }
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      url: { type: "string", required: true }
      thumbnail_url: { type: "string", nullable: true }
      caption: { type: "string", nullable: true }
      display_order: { type: "integer", default: 0 }
      created_at: { type: "timestamp", auto: true }
    
    relationships:
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }

  # --------------------------------------------------------------------------
  # AMENITY
  # --------------------------------------------------------------------------
  Amenity:
    description: "Property amenities/features"
    fields:
      id: { type: "uuid", primary_key: true }
      name: { type: "string", required: true, unique: true }
      category: { type: "enum", values: ["essential", "feature", "safety", "location"], required: true }
      icon: { type: "string", nullable: true }
    
    relationships:
      properties: { type: "many_to_many", entity: "Property", through: "PropertyAmenity" }

  # --------------------------------------------------------------------------
  # PROPERTY AMENITY (Junction)
  # --------------------------------------------------------------------------
  PropertyAmenity:
    description: "Links properties to amenities"
    fields:
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      amenity_id: { type: "uuid", foreign_key: "Amenity.id", required: true }
    
    composite_primary_key: ["property_id", "amenity_id"]

  # --------------------------------------------------------------------------
  # PROPERTY AVAILABILITY
  # --------------------------------------------------------------------------
  PropertyAvailability:
    description: "Calendar availability for rental properties"
    fields:
      id: { type: "uuid", primary_key: true }
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      date: { type: "date", required: true }
      status: { type: "enum", values: ["available", "booked", "blocked"], default: "available" }
      price_override: { type: "decimal", nullable: true, description: "Override default nightly price" }
      min_nights_override: { type: "integer", nullable: true }
    
    unique_constraint: ["property_id", "date"]
    
    relationships:
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }

  # --------------------------------------------------------------------------
  # RENTAL BOOKING
  # --------------------------------------------------------------------------
  RentalBooking:
    description: "Booking for property rental (short or long term)"
    fields:
      id: { type: "uuid", primary_key: true }
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      guest_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Dates
      check_in_date: { type: "date", required: true }
      check_out_date: { type: "date", required: true }
      total_nights: { type: "integer", required: true }
      
      # Guest info
      number_of_guests: { type: "integer", required: true }
      guest_phone: { type: "string", required: true }
      special_requests: { type: "text", nullable: true }
      
      # Pricing breakdown
      base_price: { type: "decimal", required: true, description: "Price per night/month * nights" }
      cleaning_fee: { type: "decimal", default: 0 }
      service_fee: { type: "decimal", required: true, description: "Platform fee" }
      total_price: { type: "decimal", required: true }
      deposit_amount: { type: "decimal", default: 0 }
      
      # Payment
      payment_status: { type: "enum", values: ["pending", "paid", "partially_refunded", "refunded", "failed"], default: "pending" }
      payment_intent_id: { type: "string", nullable: true }
      paid_at: { type: "timestamp", nullable: true }
      
      # Deposit
      deposit_held: { type: "boolean", default: false }
      deposit_released_at: { type: "timestamp", nullable: true }
      
      # Booking status
      status: { type: "enum", required: true, values: ["pending", "confirmed", "cancelled", "completed", "disputed"], default: "pending" }
      requires_owner_approval: { type: "boolean", default: true }
      confirmed_at: { type: "timestamp", nullable: true }
      cancelled_at: { type: "timestamp", nullable: true }
      cancellation_reason: { type: "text", nullable: true }
      cancelled_by: { type: "uuid", nullable: true, description: "User ID who cancelled" }
      
      # Check-in/out
      checked_in_at: { type: "timestamp", nullable: true }
      checked_out_at: { type: "timestamp", nullable: true }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
    
    relationships:
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }
      guest: { type: "belongs_to", entity: "User", foreign_key: "guest_id" }
      transactions: { type: "has_many", entity: "Transaction", foreign_key: "rental_booking_id" }
      review: { type: "has_one", entity: "Review", foreign_key: "rental_booking_id" }

  # --------------------------------------------------------------------------
  # PURCHASE OFFER
  # --------------------------------------------------------------------------
  PurchaseOffer:
    description: "Offer to purchase a property"
    fields:
      id: { type: "uuid", primary_key: true }
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      buyer_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Offer details
      offer_amount: { type: "decimal", required: true }
      message: { type: "text", nullable: true }
      financing_type: { type: "enum", values: ["cash", "mortgage", "mixed"], required: true }
      contingencies: { type: "text", nullable: true, description: "Conditions for the offer" }
      
      # Timeline
      proposed_closing_date: { type: "date", nullable: true }
      offer_valid_until: { type: "timestamp", required: true }
      
      # Status
      status: { type: "enum", required: true, values: ["pending", "accepted", "rejected", "countered", "withdrawn", "expired"], default: "pending" }
      
      # Counter offer
      counter_offer_amount: { type: "decimal", nullable: true }
      counter_offer_message: { type: "text", nullable: true }
      counter_offer_at: { type: "timestamp", nullable: true }
      
      # Response
      responded_at: { type: "timestamp", nullable: true }
      response_message: { type: "text", nullable: true }
      
      # Contract
      contract_signed: { type: "boolean", default: false }
      contract_signed_at: { type: "timestamp", nullable: true }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
    
    relationships:
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }
      buyer: { type: "belongs_to", entity: "User", foreign_key: "buyer_id" }
      transactions: { type: "has_many", entity: "Transaction", foreign_key: "purchase_offer_id" }

  # --------------------------------------------------------------------------
  # TRANSACTION
  # --------------------------------------------------------------------------
  Transaction:
    description: "Financial transactions (rentals, purchases, refunds)"
    fields:
      id: { type: "uuid", primary_key: true }
      
      # Related entities (one will be set)
      rental_booking_id: { type: "uuid", foreign_key: "RentalBooking.id", nullable: true }
      purchase_offer_id: { type: "uuid", foreign_key: "PurchaseOffer.id", nullable: true }
      
      # Parties
      payer_id: { type: "uuid", foreign_key: "User.id", required: true }
      payee_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Transaction details
      amount: { type: "decimal", required: true }
      currency: { type: "string", default: "BAM" }
      transaction_type: { type: "enum", required: true, values: ["rental_payment", "deposit_hold", "deposit_release", "purchase_deposit", "purchase_payment", "refund", "platform_fee", "owner_payout"] }
      
      # Payment processor
      payment_method: { type: "enum", values: ["card", "bank_transfer", "cash", "other"], required: true }
      payment_processor: { type: "string", nullable: true, description: "e.g., Stripe" }
      processor_transaction_id: { type: "string", nullable: true }
      processor_fee: { type: "decimal", default: 0 }
      
      # Status
      status: { type: "enum", required: true, values: ["pending", "processing", "completed", "failed", "refunded"], default: "pending" }
      
      # Metadata
      description: { type: "text", nullable: true }
      metadata: { type: "json", nullable: true }
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
      completed_at: { type: "timestamp", nullable: true }
    
    relationships:
      rental_booking: { type: "belongs_to", entity: "RentalBooking", foreign_key: "rental_booking_id" }
      purchase_offer: { type: "belongs_to", entity: "PurchaseOffer", foreign_key: "purchase_offer_id" }
      payer: { type: "belongs_to", entity: "User", foreign_key: "payer_id" }
      payee: { type: "belongs_to", entity: "User", foreign_key: "payee_id" }

  # --------------------------------------------------------------------------
  # REVIEW
  # --------------------------------------------------------------------------
  Review:
    description: "Reviews for properties and users"
    fields:
      id: { type: "uuid", primary_key: true }
      
      # What is being reviewed
      property_id: { type: "uuid", foreign_key: "Property.id", nullable: true }
      rental_booking_id: { type: "uuid", foreign_key: "RentalBooking.id", nullable: true, description: "For rental reviews" }
      
      # Who is reviewing whom
      reviewer_id: { type: "uuid", foreign_key: "User.id", required: true }
      reviewee_id: { type: "uuid", foreign_key: "User.id", nullable: true, description: "User being reviewed (owner or guest)" }
      
      # Review type
      review_type: { type: "enum", required: true, values: ["property", "guest", "owner"] }
      
      # Content
      rating: { type: "integer", required: true, min: 1, max: 5 }
      title: { type: "string", nullable: true }
      comment: { type: "text", required: true }
      
      # Detailed ratings (for properties)
      cleanliness_rating: { type: "integer", nullable: true, min: 1, max: 5 }
      accuracy_rating: { type: "integer", nullable: true, min: 1, max: 5 }
      communication_rating: { type: "integer", nullable: true, min: 1, max: 5 }
      location_rating: { type: "integer", nullable: true, min: 1, max: 5 }
      value_rating: { type: "integer", nullable: true, min: 1, max: 5 }
      
      # Response
      response: { type: "text", nullable: true, description: "Owner response to review" }
      response_at: { type: "timestamp", nullable: true }
      
      # Status
      is_visible: { type: "boolean", default: true }
      is_verified: { type: "boolean", default: false, description: "Verified booking review" }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
      updated_at: { type: "timestamp", auto: true }
    
    relationships:
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }
      rental_booking: { type: "belongs_to", entity: "RentalBooking", foreign_key: "rental_booking_id" }
      reviewer: { type: "belongs_to", entity: "User", foreign_key: "reviewer_id" }
      reviewee: { type: "belongs_to", entity: "User", foreign_key: "reviewee_id" }

  # --------------------------------------------------------------------------
  # MESSAGE
  # --------------------------------------------------------------------------
  Message:
    description: "Messages between users"
    fields:
      id: { type: "uuid", primary_key: true }
      conversation_id: { type: "uuid", required: true, description: "Groups related messages" }
      
      # Participants
      sender_id: { type: "uuid", foreign_key: "User.id", required: true }
      recipient_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Context
      property_id: { type: "uuid", foreign_key: "Property.id", nullable: true }
      rental_booking_id: { type: "uuid", foreign_key: "RentalBooking.id", nullable: true }
      purchase_offer_id: { type: "uuid", foreign_key: "PurchaseOffer.id", nullable: true }
      
      # Content
      message: { type: "text", required: true }
      
      # Status
      is_read: { type: "boolean", default: false }
      read_at: { type: "timestamp", nullable: true }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
    
    relationships:
      sender: { type: "belongs_to", entity: "User", foreign_key: "sender_id" }
      recipient: { type: "belongs_to", entity: "User", foreign_key: "recipient_id" }
      property: { type: "belongs_to", entity: "Property", foreign_key: "property_id" }
      rental_booking: { type: "belongs_to", entity: "RentalBooking", foreign_key: "rental_booking_id" }
      purchase_offer: { type: "belongs_to", entity: "PurchaseOffer", foreign_key: "purchase_offer_id" }

  # --------------------------------------------------------------------------
  # SAVED PROPERTY (Junction)
  # --------------------------------------------------------------------------
  SavedProperty:
    description: "User's saved/favorited properties"
    fields:
      user_id: { type: "uuid", foreign_key: "User.id", required: true }
      property_id: { type: "uuid", foreign_key: "Property.id", required: true }
      created_at: { type: "timestamp", auto: true }
    
    composite_primary_key: ["user_id", "property_id"]

  # --------------------------------------------------------------------------
  # NOTIFICATION
  # --------------------------------------------------------------------------
  Notification:
    description: "User notifications"
    fields:
      id: { type: "uuid", primary_key: true }
      user_id: { type: "uuid", foreign_key: "User.id", required: true }
      
      # Content
      type: { type: "enum", required: true, values: ["booking_request", "booking_confirmed", "booking_cancelled", "purchase_offer_received", "offer_accepted", "offer_countered", "message_received", "review_received", "payout_completed", "system"] }
      title: { type: "string", required: true }
      message: { type: "text", required: true }
      
      # Link
      action_url: { type: "string", nullable: true }
      
      # Status
      is_read: { type: "boolean", default: false }
      read_at: { type: "timestamp", nullable: true }
      
      # Metadata
      created_at: { type: "timestamp", auto: true }
    
    relationships:
      user: { type: "belongs_to", entity: "User", foreign_key: "user_id" }

# ============================================================================
# ENUMS REFERENCE
# ============================================================================

enums:
  user_verification_status: ["pending", "verified", "rejected"]
  user_account_status: ["active", "suspended", "deleted"]
  property_type: ["apartment", "house", "studio", "villa", "condo", "land", "commercial"]
  listing_type: ["rent", "sale", "both"]
  property_status: ["draft", "active", "inactive", "sold", "rented_long_term", "under_contract"]
  amenity_category: ["essential", "feature", "safety", "location"]
  availability_status: ["available", "booked", "blocked"]
  booking_status: ["pending", "confirmed", "cancelled", "completed", "disputed"]
  payment_status: ["pending", "paid", "partially_refunded", "refunded", "failed"]
  offer_status: ["pending", "accepted", "rejected", "countered", "withdrawn", "expired"]
  transaction_type: ["rental_payment", "deposit_hold", "deposit_release", "purchase_deposit", "purchase_payment", "refund", "platform_fee", "owner_payout"]
  transaction_status: ["pending", "processing", "completed", "failed", "refunded"]
  payment_method: ["card", "bank_transfer", "cash", "other"]
  review_type: ["property", "guest", "owner"]
  financing_type: ["cash", "mortgage", "mixed"]
  notification_type: ["booking_request", "booking_confirmed", "booking_cancelled", "purchase_offer_received", "offer_accepted", "offer_countered", "message_received", "review_received", "payout_completed", "system"]

# ============================================================================
# INDEXES (For performance)
# ============================================================================

indexes:
  - entity: "Property"
    fields: ["status", "listing_type", "city"]
    type: "composite"
  
  - entity: "Property"
    fields: ["owner_id"]
    type: "single"
  
  - entity: "Property"
    fields: ["slug"]
    type: "unique"
  
  - entity: "RentalBooking"
    fields: ["guest_id", "status"]
    type: "composite"
  
  - entity: "RentalBooking"
    fields: ["property_id", "check_in_date", "check_out_date"]
    type: "composite"
  
  - entity: "PurchaseOffer"
    fields: ["property_id", "status"]
    type: "composite"
  
  - entity: "PurchaseOffer"
    fields: ["buyer_id", "status"]
    type: "composite"
  
  - entity: "PropertyAvailability"
    fields: ["property_id", "date"]
    type: "unique_composite"
  
  - entity: "Message"
    fields: ["conversation_id", "created_at"]
    type: "composite"
  
  - entity: "Message"
    fields: ["recipient_id", "is_read"]
    type: "composite"
  
  - entity: "Transaction"
    fields: ["rental_booking_id"]
    type: "single"
  
  - entity: "Transaction"
    fields: ["purchase_offer_id"]
    type: "single"
  
  - entity: "Review"
    fields: ["property_id", "is_visible"]
    type: "composite"
